
MAKEFLAGS = -s

SHELL = @SHELL@
top_srcdir = @top_srcdir@
srcdir = @srcdir@
VPATH = @srcdir@

@SET_MAKE@
DISTRIB = @PACKAGE_TARNAME@-@PACKAGE_VERSION@
CCDEPMODE = @CCDEPMODE@

# defaults
CXX = @CCACHE@ @DISTCC@ @CXX@ -static
LD = @CXX@ -static
CXXDEBUG = @CCACHE@ @DISTCC@ @CXXDEBUG@
LDDEBUG = @CXXDEBUG@
LIBS = @LIBS@
INCLUDES = @TCL_INCLUDE_SPEC@

include $(top_srcdir)/build/build.mk

# utils
STRIP = @STRIP@
DIFF = @DIFF@
SED = @SED@
GREP = @GREP@
AWK = @AWK@
YACC = @YACC@
VALGRIND = GLIBCPP_FORCE_NEW=1 GLIBCXX_FORCE_NEW=1 @VALGRIND@
UNITRUNNER = build/UnitRunner

DEBCXXFLAGS = -DDEBUG -fno-inline -g3 -ggdb3 -Wshadow -O0 @DEBGCC3@ @GCC4DEB@ @DEBCXXFLAGS@
CFLGS = @GCC3@ -x c++ $(INCLUDES)

MAKE_BDLIB = $(MAKE) 'MAKE=$(MAKE)' 'CXX=$(CXX)' 'LD=$(LD)' 'CCDEPMODE=$(CCDEPMODE)' \
'STRIP=$(STRIP)' 'CFLGS=$(CFLGS) @NOUNITSGCC3@' 'LIBS=$(LIBS)' 'BINBUILD=(distrib)'

MAKE_DEBUG = $(MAKE) 'MAKE=$(MAKE)' 'CXX=$(CXXDEBUG)' 'LD=$(LDDEBUG) -g' 'CCDEPMODE=$(CCDEPMODE)'  \
'STRIP=touch' 'CFLGS=$(CFLGS) $(DEBCXXFLAGS) @DEBNOUNITSGCC3@ -Werror' 'LIBS=$(LIBS)' 'BINBUILD=(debug)'

MAKE_UNITS = $(MAKE) 'MAKE=$(MAKE)' 'CXX=$(CXXDEBUG)' 'LD=$(LDDEBUG) -g' 'CCDEPMODE=$(CCDEPMODE)' \
'STRIP=touch' 'CFLGS=$(CFLGS) $(DEBCXXFLAGS) -Werror' 'LIBS=$(LIBS)'

MAKE_UTILS = $(MAKE) 'MAKE=$(MAKE)' 'CXX=$(CXXDEBUG)' 'STRIP=touch' 'CCDEPMODE=$(CCDEPMODE)' \
'CFLGS=$(CFLGS) $(DEBCXXFLAGS)' 'LIBS=$(LIBS)' 'LD=$(LDDEBUG) -g'

.PHONY: all clean distclean bdlib debug test.debug test test.verbose checkclean.bdlib checkclean.debug

all: bdlib

clean:
	-+@cd src && $(MAKE) clean
	-+@cd build && $(MAKE) clean
	@rm -f build/stamp.* *~ src/*~ configure.temp utctime ts

distclean: clean
	-+@cd build && $(MAKE) distclean
	-+@cd src && $(MAKE) distclean
	@rm -f Makefile config.log config.status configure.lineno
	@rm -rf *-$(VERSION)/ autom4te.cache/ autoscan.log configure.scan

checkclean.bdlib:
	@(if test -f build/stamp.debug; then \
	  echo "[*] Cleaning up alternate build"; \
	  $(MAKE) MAKEFLAGS=-s clean; \
	  fi) && \
	  touch build/stamp.bdlib

checkclean.debug:
	@(if test -f build/stamp.bdlib; then \
	  echo "[*] Cleaning up alternate build"; \
	  $(MAKE) MAKEFLAGS=-s clean; \
	  fi) && \
	  touch build/stamp.debug

bdlib: checkclean.bdlib
	@echo "[*] Making BDLIB"
	+@cd src && $(MAKE_BDLIB) bdlib

debug: checkclean.debug
	@echo "[*] Making BDLIB (debug)"
	+@cd src && $(MAKE_DEBUG) bdlib

$(BDLIB_UNITS):
	+@cd src/tests && $(MAKE_UNITS) units

$(UNITRUNNER): debug $(BDLIB_UNITS)
	+@cd build && ${MAKE_DEBUG} UnitRunner

test.debug: checkclean.debug $(UNITRUNNER)
	@echo "[*] Running unit tests..."
	@$(VALGRIND) $(UNITRUNNER) quiet

test.verbose: checkclean.debug $(UNITRUNNER)
	@echo "[*] Running unit tests..."
	@$(VALGRIND) $(UNITRUNNER)

test: checkclean.debug $(UNITRUNNER)
	@echo "[*] Running unit tests..."
	@$(UNITRUNNER) quiet
